{"version":3,"sources":["runserver.js"],"names":[],"mappings":"AAAA;;;AAGA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,YAAY,QAAQ,oBAAR,GAAhB;AACA,IAAI,OAAO,QAAQ,cAAR,CAAX;AACA,IAAI,OAAO,IAAI,IAAJ,EAAX;AACA,IAAI,UAAU,QAAQ,uBAAR,CAAd;AACA,IAAI,SAAS,IAAI,KAAK,MAAT,EAAb;AACA,OAAO,UAAP,CAAkB,UAAU,MAA5B;;AAEA,IAAI,YAAY;;AAEZ,cAAW,UAAU,MAAV,EAAkB,OAAlB,EAA2B,IAA3B,EAAiC;;AAExC,eAAO,IAAP,CAAY,QAAZ,CAAqB,YAArB,EAAmC,aAAnC,EAAkD;AAC9C,6BAAiB,IAD6B,EACV;AACpC,kCAAsB,IAFwB,EAEX;AACnC,6BAAiB,WAH6B,EAGb;AACjC,0BAAc,UAAU,SAAV,EAAqB,QAArB,EAA+B;AACzC,qBAAK,cAAL,CAAoB,SAApB,EAA+B,UAAU,GAAV,EAAe,GAAf,EAAoB;AAC/C,4BAAQ,GAAR,CAAY,iBAAZ,EAA+B,GAA/B,EAAoC,GAApC;AACA,wBAAI,GAAJ,EAAS;AACL,+BAAO,SAAS,IAAT,EAAe,IAAf,CAAP;AACH,qBAFD,MAEO;AACH,+BAAO,SAAS,IAAT,EAAe,GAAf,CAAP;AACH;AAEJ,iBARD;AAUH;AAf6C,SAAlD;;AAkBA;AACH;;AAvBW,CAAhB;;AA2BA,UAAU,QAAV,CAAmB,UAAnB,GAAgC;AAC5B,UAAM,MADsB;AAE5B,aAAS;AAFmB,CAAhC;;AAMA,OAAO,QAAP,CAAgB,CACZ,KADY,EAEZ,MAFY,EAIZ;AACI,cAAU;AADd,CAJY,EAMT,SANS,CAAhB,EAMmB,EAAC,QAAQ,CAAC,KAAD,CAAT,EANnB,EAMsC,UAAU,GAAV,EAAe;;AAEjD,QAAI,GAAJ,EAAS;;AAEL,YAAI,KAAJ,CAAU,GAAV;AACA,gBAAQ,IAAR,CAAa,CAAb;AACH;;AAED;AACA,WAAO,KAAP,CAAa,YAAY;AACrB,gBAAQ,GAAR,CAAY,sBAAZ;AAEH,KAHD;AAIH,CAnBD;AAoBA,IAAI,SAAS,QAAQ,iBAAR,EAA2B,MAA3B,CAAb;AACA,OAAO,KAAP,CAAa,MAAb;AACA,OAAO,OAAP,GAAiB,MAAjB","file":"runserver-compiled.js","sourcesContent":["/**\n * Created by zoram on 10/11/16.\n */\nvar Hapi = require('hapi');\nvar Inert = require('inert');\nvar Vision = require('vision');\nvar appConfig = require('./config/appConfig')();\nvar auth = require('./model/Auth');\nvar Auth = new auth();\nvar authlib = require('./lib/auth/authHeader');\nvar server = new Hapi.Server();\nserver.connection(appConfig.server);\n\nvar apiplugin = {\n\n    register : function (server, options, next) {\n\n        server.auth.strategy('authHeader', 'header-auth', {\n            allowQueryToken: true,              // optional, true by default\n            allowMultipleHeaders: true,        // optional, true by default\n            accessTokenName: 'authToken',    // optional, 'access_token' by default\n            validateFunc: function (authToken, callback) {\n                Auth.getSessionUser(authToken, function (err, res) {\n                    console.log(\"done validation\", err, res);\n                    if (err) {\n                        return callback(true, null);\n                    } else {\n                        return callback(null, res);\n                    }\n\n                })\n\n            }\n        });\n\n        next();\n    }\n\n}\n\napiplugin.register.attributes = {\n    name: 'AUTH',\n    version: '1.0.0'\n}\n\n\nserver.register([\n    Inert,\n    Vision,\n\n    {\n        register: authlib\n    }, apiplugin], {select: ['api']}, function (err) {\n\n    if (err) {\n\n        log.error(err);\n        process.exit(1);\n    }\n\n    // Start the Server Command\n    server.start(function () {\n        console.log(\"Server (2.1) started\");\n\n    });\n});\nvar routes = require('./config/routes')(server);\nserver.route(routes);\nmodule.exports = server;\n"]}